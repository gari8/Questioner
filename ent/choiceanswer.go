// Code generated by entc, DO NOT EDIT.

package ent

import (
	"faves4/ent/choice"
	"faves4/ent/choiceanswer"
	"faves4/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ChoiceAnswer is the model entity for the ChoiceAnswer schema.
type ChoiceAnswer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CratedAt holds the value of the "crated_at" field.
	CratedAt time.Time `json:"crated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChoiceAnswerQuery when eager-loading is set.
	Edges                ChoiceAnswerEdges `json:"edges"`
	choice_choiceanswers *int
	user_choiceanswers   *string
}

// ChoiceAnswerEdges holds the relations/edges for other nodes in the graph.
type ChoiceAnswerEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Choice `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChoiceAnswerEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChoiceAnswerEdges) ParentOrErr() (*Choice, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: choice.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChoiceAnswer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case choiceanswer.FieldID:
			values[i] = new(sql.NullInt64)
		case choiceanswer.FieldCratedAt:
			values[i] = new(sql.NullTime)
		case choiceanswer.ForeignKeys[0]: // choice_choiceanswers
			values[i] = new(sql.NullInt64)
		case choiceanswer.ForeignKeys[1]: // user_choiceanswers
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChoiceAnswer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChoiceAnswer fields.
func (ca *ChoiceAnswer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case choiceanswer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = int(value.Int64)
		case choiceanswer.FieldCratedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crated_at", values[i])
			} else if value.Valid {
				ca.CratedAt = value.Time
			}
		case choiceanswer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field choice_choiceanswers", value)
			} else if value.Valid {
				ca.choice_choiceanswers = new(int)
				*ca.choice_choiceanswers = int(value.Int64)
			}
		case choiceanswer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_choiceanswers", values[i])
			} else if value.Valid {
				ca.user_choiceanswers = new(string)
				*ca.user_choiceanswers = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the ChoiceAnswer entity.
func (ca *ChoiceAnswer) QueryOwner() *UserQuery {
	return (&ChoiceAnswerClient{config: ca.config}).QueryOwner(ca)
}

// QueryParent queries the "parent" edge of the ChoiceAnswer entity.
func (ca *ChoiceAnswer) QueryParent() *ChoiceQuery {
	return (&ChoiceAnswerClient{config: ca.config}).QueryParent(ca)
}

// Update returns a builder for updating this ChoiceAnswer.
// Note that you need to call ChoiceAnswer.Unwrap() before calling this method if this ChoiceAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *ChoiceAnswer) Update() *ChoiceAnswerUpdateOne {
	return (&ChoiceAnswerClient{config: ca.config}).UpdateOne(ca)
}

// Unwrap unwraps the ChoiceAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *ChoiceAnswer) Unwrap() *ChoiceAnswer {
	tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChoiceAnswer is not a transactional entity")
	}
	ca.config.driver = tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *ChoiceAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("ChoiceAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v", ca.ID))
	builder.WriteString(", crated_at=")
	builder.WriteString(ca.CratedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChoiceAnswers is a parsable slice of ChoiceAnswer.
type ChoiceAnswers []*ChoiceAnswer

func (ca ChoiceAnswers) config(cfg config) {
	for _i := range ca {
		ca[_i].config = cfg
	}
}
