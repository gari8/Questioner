// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"faves4/ent/answer"
	"faves4/ent/choice"
	"faves4/ent/choiceanswer"
	"faves4/ent/predicate"
	"faves4/ent/question"
	"faves4/ent/user"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer       = "Answer"
	TypeChoice       = "Choice"
	TypeChoiceAnswer = "ChoiceAnswer"
	TypeQuestion     = "Question"
	TypeUser         = "User"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	answer_type   *string
	content       *string
	crated_at     *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	parent        *string
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*Answer, error)
	predicates    []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id int) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAnswerType sets the "answer_type" field.
func (m *AnswerMutation) SetAnswerType(s string) {
	m.answer_type = &s
}

// AnswerType returns the value of the "answer_type" field in the mutation.
func (m *AnswerMutation) AnswerType() (r string, exists bool) {
	v := m.answer_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswerType returns the old "answer_type" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldAnswerType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAnswerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAnswerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswerType: %w", err)
	}
	return oldValue.AnswerType, nil
}

// ClearAnswerType clears the value of the "answer_type" field.
func (m *AnswerMutation) ClearAnswerType() {
	m.answer_type = nil
	m.clearedFields[answer.FieldAnswerType] = struct{}{}
}

// AnswerTypeCleared returns if the "answer_type" field was cleared in this mutation.
func (m *AnswerMutation) AnswerTypeCleared() bool {
	_, ok := m.clearedFields[answer.FieldAnswerType]
	return ok
}

// ResetAnswerType resets all changes to the "answer_type" field.
func (m *AnswerMutation) ResetAnswerType() {
	m.answer_type = nil
	delete(m.clearedFields, answer.FieldAnswerType)
}

// SetContent sets the "content" field.
func (m *AnswerMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *AnswerMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *AnswerMutation) ResetContent() {
	m.content = nil
}

// SetCratedAt sets the "crated_at" field.
func (m *AnswerMutation) SetCratedAt(t time.Time) {
	m.crated_at = &t
}

// CratedAt returns the value of the "crated_at" field in the mutation.
func (m *AnswerMutation) CratedAt() (r time.Time, exists bool) {
	v := m.crated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCratedAt returns the old "crated_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldCratedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCratedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCratedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCratedAt: %w", err)
	}
	return oldValue.CratedAt, nil
}

// ResetCratedAt resets all changes to the "crated_at" field.
func (m *AnswerMutation) ResetCratedAt() {
	m.crated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AnswerMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[answer.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AnswerMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[answer.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, answer.FieldUpdatedAt)
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *AnswerMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *AnswerMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *AnswerMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *AnswerMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *AnswerMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *AnswerMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetParentID sets the "parent" edge to the Question entity by id.
func (m *AnswerMutation) SetParentID(id string) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Question entity.
func (m *AnswerMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Question entity was cleared.
func (m *AnswerMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *AnswerMutation) ParentID() (id string, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *AnswerMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *AnswerMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.answer_type != nil {
		fields = append(fields, answer.FieldAnswerType)
	}
	if m.content != nil {
		fields = append(fields, answer.FieldContent)
	}
	if m.crated_at != nil {
		fields = append(fields, answer.FieldCratedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, answer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldAnswerType:
		return m.AnswerType()
	case answer.FieldContent:
		return m.Content()
	case answer.FieldCratedAt:
		return m.CratedAt()
	case answer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldAnswerType:
		return m.OldAnswerType(ctx)
	case answer.FieldContent:
		return m.OldContent(ctx)
	case answer.FieldCratedAt:
		return m.OldCratedAt(ctx)
	case answer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldAnswerType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswerType(v)
		return nil
	case answer.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case answer.FieldCratedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCratedAt(v)
		return nil
	case answer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(answer.FieldAnswerType) {
		fields = append(fields, answer.FieldAnswerType)
	}
	if m.FieldCleared(answer.FieldUpdatedAt) {
		fields = append(fields, answer.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	switch name {
	case answer.FieldAnswerType:
		m.ClearAnswerType()
		return nil
	case answer.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldAnswerType:
		m.ResetAnswerType()
		return nil
	case answer.FieldContent:
		m.ResetContent()
		return nil
	case answer.FieldCratedAt:
		m.ResetCratedAt()
		return nil
	case answer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, answer.EdgeOwner)
	}
	if m.parent != nil {
		edges = append(edges, answer.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case answer.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, answer.EdgeOwner)
	}
	if m.clearedparent {
		edges = append(edges, answer.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case answer.EdgeOwner:
		return m.clearedowner
	case answer.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	switch name {
	case answer.EdgeOwner:
		m.ClearOwner()
		return nil
	case answer.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	switch name {
	case answer.EdgeOwner:
		m.ResetOwner()
		return nil
	case answer.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Answer edge %s", name)
}

// ChoiceMutation represents an operation that mutates the Choice nodes in the graph.
type ChoiceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	content              *string
	clearedFields        map[string]struct{}
	parent               *string
	clearedparent        bool
	choiceanswers        map[int]struct{}
	removedchoiceanswers map[int]struct{}
	clearedchoiceanswers bool
	done                 bool
	oldValue             func(context.Context) (*Choice, error)
	predicates           []predicate.Choice
}

var _ ent.Mutation = (*ChoiceMutation)(nil)

// choiceOption allows management of the mutation configuration using functional options.
type choiceOption func(*ChoiceMutation)

// newChoiceMutation creates new mutation for the Choice entity.
func newChoiceMutation(c config, op Op, opts ...choiceOption) *ChoiceMutation {
	m := &ChoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeChoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChoiceID sets the ID field of the mutation.
func withChoiceID(id int) choiceOption {
	return func(m *ChoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Choice
		)
		m.oldValue = func(ctx context.Context) (*Choice, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Choice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChoice sets the old Choice of the mutation.
func withChoice(node *Choice) choiceOption {
	return func(m *ChoiceMutation) {
		m.oldValue = func(context.Context) (*Choice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContent sets the "content" field.
func (m *ChoiceMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ChoiceMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Choice entity.
// If the Choice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ChoiceMutation) ResetContent() {
	m.content = nil
}

// SetParentID sets the "parent" edge to the Question entity by id.
func (m *ChoiceMutation) SetParentID(id string) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Question entity.
func (m *ChoiceMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Question entity was cleared.
func (m *ChoiceMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *ChoiceMutation) ParentID() (id string, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ChoiceMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ChoiceMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChoiceanswerIDs adds the "choiceanswers" edge to the ChoiceAnswer entity by ids.
func (m *ChoiceMutation) AddChoiceanswerIDs(ids ...int) {
	if m.choiceanswers == nil {
		m.choiceanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.choiceanswers[ids[i]] = struct{}{}
	}
}

// ClearChoiceanswers clears the "choiceanswers" edge to the ChoiceAnswer entity.
func (m *ChoiceMutation) ClearChoiceanswers() {
	m.clearedchoiceanswers = true
}

// ChoiceanswersCleared reports if the "choiceanswers" edge to the ChoiceAnswer entity was cleared.
func (m *ChoiceMutation) ChoiceanswersCleared() bool {
	return m.clearedchoiceanswers
}

// RemoveChoiceanswerIDs removes the "choiceanswers" edge to the ChoiceAnswer entity by IDs.
func (m *ChoiceMutation) RemoveChoiceanswerIDs(ids ...int) {
	if m.removedchoiceanswers == nil {
		m.removedchoiceanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchoiceanswers[ids[i]] = struct{}{}
	}
}

// RemovedChoiceanswers returns the removed IDs of the "choiceanswers" edge to the ChoiceAnswer entity.
func (m *ChoiceMutation) RemovedChoiceanswersIDs() (ids []int) {
	for id := range m.removedchoiceanswers {
		ids = append(ids, id)
	}
	return
}

// ChoiceanswersIDs returns the "choiceanswers" edge IDs in the mutation.
func (m *ChoiceMutation) ChoiceanswersIDs() (ids []int) {
	for id := range m.choiceanswers {
		ids = append(ids, id)
	}
	return
}

// ResetChoiceanswers resets all changes to the "choiceanswers" edge.
func (m *ChoiceMutation) ResetChoiceanswers() {
	m.choiceanswers = nil
	m.clearedchoiceanswers = false
	m.removedchoiceanswers = nil
}

// Op returns the operation name.
func (m *ChoiceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Choice).
func (m *ChoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChoiceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.content != nil {
		fields = append(fields, choice.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case choice.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case choice.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Choice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case choice.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Choice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChoiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChoiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Choice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChoiceMutation) ResetField(name string) error {
	switch name {
	case choice.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, choice.EdgeParent)
	}
	if m.choiceanswers != nil {
		edges = append(edges, choice.EdgeChoiceanswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case choice.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case choice.EdgeChoiceanswers:
		ids := make([]ent.Value, 0, len(m.choiceanswers))
		for id := range m.choiceanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchoiceanswers != nil {
		edges = append(edges, choice.EdgeChoiceanswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case choice.EdgeChoiceanswers:
		ids := make([]ent.Value, 0, len(m.removedchoiceanswers))
		for id := range m.removedchoiceanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, choice.EdgeParent)
	}
	if m.clearedchoiceanswers {
		edges = append(edges, choice.EdgeChoiceanswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case choice.EdgeParent:
		return m.clearedparent
	case choice.EdgeChoiceanswers:
		return m.clearedchoiceanswers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChoiceMutation) ClearEdge(name string) error {
	switch name {
	case choice.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Choice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChoiceMutation) ResetEdge(name string) error {
	switch name {
	case choice.EdgeParent:
		m.ResetParent()
		return nil
	case choice.EdgeChoiceanswers:
		m.ResetChoiceanswers()
		return nil
	}
	return fmt.Errorf("unknown Choice edge %s", name)
}

// ChoiceAnswerMutation represents an operation that mutates the ChoiceAnswer nodes in the graph.
type ChoiceAnswerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	crated_at     *time.Time
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	parent        *int
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*ChoiceAnswer, error)
	predicates    []predicate.ChoiceAnswer
}

var _ ent.Mutation = (*ChoiceAnswerMutation)(nil)

// choiceanswerOption allows management of the mutation configuration using functional options.
type choiceanswerOption func(*ChoiceAnswerMutation)

// newChoiceAnswerMutation creates new mutation for the ChoiceAnswer entity.
func newChoiceAnswerMutation(c config, op Op, opts ...choiceanswerOption) *ChoiceAnswerMutation {
	m := &ChoiceAnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeChoiceAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChoiceAnswerID sets the ID field of the mutation.
func withChoiceAnswerID(id int) choiceanswerOption {
	return func(m *ChoiceAnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *ChoiceAnswer
		)
		m.oldValue = func(ctx context.Context) (*ChoiceAnswer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChoiceAnswer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChoiceAnswer sets the old ChoiceAnswer of the mutation.
func withChoiceAnswer(node *ChoiceAnswer) choiceanswerOption {
	return func(m *ChoiceAnswerMutation) {
		m.oldValue = func(context.Context) (*ChoiceAnswer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChoiceAnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChoiceAnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChoiceAnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCratedAt sets the "crated_at" field.
func (m *ChoiceAnswerMutation) SetCratedAt(t time.Time) {
	m.crated_at = &t
}

// CratedAt returns the value of the "crated_at" field in the mutation.
func (m *ChoiceAnswerMutation) CratedAt() (r time.Time, exists bool) {
	v := m.crated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCratedAt returns the old "crated_at" field's value of the ChoiceAnswer entity.
// If the ChoiceAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceAnswerMutation) OldCratedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCratedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCratedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCratedAt: %w", err)
	}
	return oldValue.CratedAt, nil
}

// ResetCratedAt resets all changes to the "crated_at" field.
func (m *ChoiceAnswerMutation) ResetCratedAt() {
	m.crated_at = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *ChoiceAnswerMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *ChoiceAnswerMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *ChoiceAnswerMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ChoiceAnswerMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ChoiceAnswerMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ChoiceAnswerMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetParentID sets the "parent" edge to the Choice entity by id.
func (m *ChoiceAnswerMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Choice entity.
func (m *ChoiceAnswerMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Choice entity was cleared.
func (m *ChoiceAnswerMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *ChoiceAnswerMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ChoiceAnswerMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ChoiceAnswerMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Op returns the operation name.
func (m *ChoiceAnswerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChoiceAnswer).
func (m *ChoiceAnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChoiceAnswerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.crated_at != nil {
		fields = append(fields, choiceanswer.FieldCratedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChoiceAnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case choiceanswer.FieldCratedAt:
		return m.CratedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChoiceAnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case choiceanswer.FieldCratedAt:
		return m.OldCratedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ChoiceAnswer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceAnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case choiceanswer.FieldCratedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCratedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ChoiceAnswer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChoiceAnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChoiceAnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceAnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChoiceAnswer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChoiceAnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChoiceAnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChoiceAnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChoiceAnswer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChoiceAnswerMutation) ResetField(name string) error {
	switch name {
	case choiceanswer.FieldCratedAt:
		m.ResetCratedAt()
		return nil
	}
	return fmt.Errorf("unknown ChoiceAnswer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChoiceAnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, choiceanswer.EdgeOwner)
	}
	if m.parent != nil {
		edges = append(edges, choiceanswer.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChoiceAnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case choiceanswer.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case choiceanswer.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChoiceAnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChoiceAnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChoiceAnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, choiceanswer.EdgeOwner)
	}
	if m.clearedparent {
		edges = append(edges, choiceanswer.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChoiceAnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case choiceanswer.EdgeOwner:
		return m.clearedowner
	case choiceanswer.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChoiceAnswerMutation) ClearEdge(name string) error {
	switch name {
	case choiceanswer.EdgeOwner:
		m.ClearOwner()
		return nil
	case choiceanswer.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown ChoiceAnswer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChoiceAnswerMutation) ResetEdge(name string) error {
	switch name {
	case choiceanswer.EdgeOwner:
		m.ResetOwner()
		return nil
	case choiceanswer.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown ChoiceAnswer edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	title               *string
	content             *string
	text_after_answered *string
	enabled             *bool
	answer_type         *string
	published_at        *time.Time
	finished_at         *time.Time
	crated_at           *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	owner               *string
	clearedowner        bool
	answers             map[int]struct{}
	removedanswers      map[int]struct{}
	clearedanswers      bool
	choices             map[int]struct{}
	removedchoices      map[int]struct{}
	clearedchoices      bool
	done                bool
	oldValue            func(context.Context) (*Question, error)
	predicates          []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id string) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Question entities.
func (m *QuestionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *QuestionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *QuestionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *QuestionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *QuestionMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *QuestionMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *QuestionMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *QuestionMutation) ResetContent() {
	m.content = nil
}

// SetTextAfterAnswered sets the "text_after_answered" field.
func (m *QuestionMutation) SetTextAfterAnswered(s string) {
	m.text_after_answered = &s
}

// TextAfterAnswered returns the value of the "text_after_answered" field in the mutation.
func (m *QuestionMutation) TextAfterAnswered() (r string, exists bool) {
	v := m.text_after_answered
	if v == nil {
		return
	}
	return *v, true
}

// OldTextAfterAnswered returns the old "text_after_answered" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldTextAfterAnswered(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTextAfterAnswered is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTextAfterAnswered requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextAfterAnswered: %w", err)
	}
	return oldValue.TextAfterAnswered, nil
}

// ClearTextAfterAnswered clears the value of the "text_after_answered" field.
func (m *QuestionMutation) ClearTextAfterAnswered() {
	m.text_after_answered = nil
	m.clearedFields[question.FieldTextAfterAnswered] = struct{}{}
}

// TextAfterAnsweredCleared returns if the "text_after_answered" field was cleared in this mutation.
func (m *QuestionMutation) TextAfterAnsweredCleared() bool {
	_, ok := m.clearedFields[question.FieldTextAfterAnswered]
	return ok
}

// ResetTextAfterAnswered resets all changes to the "text_after_answered" field.
func (m *QuestionMutation) ResetTextAfterAnswered() {
	m.text_after_answered = nil
	delete(m.clearedFields, question.FieldTextAfterAnswered)
}

// SetEnabled sets the "enabled" field.
func (m *QuestionMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *QuestionMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *QuestionMutation) ResetEnabled() {
	m.enabled = nil
}

// SetAnswerType sets the "answer_type" field.
func (m *QuestionMutation) SetAnswerType(s string) {
	m.answer_type = &s
}

// AnswerType returns the value of the "answer_type" field in the mutation.
func (m *QuestionMutation) AnswerType() (r string, exists bool) {
	v := m.answer_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswerType returns the old "answer_type" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldAnswerType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAnswerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAnswerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswerType: %w", err)
	}
	return oldValue.AnswerType, nil
}

// ClearAnswerType clears the value of the "answer_type" field.
func (m *QuestionMutation) ClearAnswerType() {
	m.answer_type = nil
	m.clearedFields[question.FieldAnswerType] = struct{}{}
}

// AnswerTypeCleared returns if the "answer_type" field was cleared in this mutation.
func (m *QuestionMutation) AnswerTypeCleared() bool {
	_, ok := m.clearedFields[question.FieldAnswerType]
	return ok
}

// ResetAnswerType resets all changes to the "answer_type" field.
func (m *QuestionMutation) ResetAnswerType() {
	m.answer_type = nil
	delete(m.clearedFields, question.FieldAnswerType)
}

// SetPublishedAt sets the "published_at" field.
func (m *QuestionMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *QuestionMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ClearPublishedAt clears the value of the "published_at" field.
func (m *QuestionMutation) ClearPublishedAt() {
	m.published_at = nil
	m.clearedFields[question.FieldPublishedAt] = struct{}{}
}

// PublishedAtCleared returns if the "published_at" field was cleared in this mutation.
func (m *QuestionMutation) PublishedAtCleared() bool {
	_, ok := m.clearedFields[question.FieldPublishedAt]
	return ok
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *QuestionMutation) ResetPublishedAt() {
	m.published_at = nil
	delete(m.clearedFields, question.FieldPublishedAt)
}

// SetFinishedAt sets the "finished_at" field.
func (m *QuestionMutation) SetFinishedAt(t time.Time) {
	m.finished_at = &t
}

// FinishedAt returns the value of the "finished_at" field in the mutation.
func (m *QuestionMutation) FinishedAt() (r time.Time, exists bool) {
	v := m.finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishedAt returns the old "finished_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldFinishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishedAt: %w", err)
	}
	return oldValue.FinishedAt, nil
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (m *QuestionMutation) ClearFinishedAt() {
	m.finished_at = nil
	m.clearedFields[question.FieldFinishedAt] = struct{}{}
}

// FinishedAtCleared returns if the "finished_at" field was cleared in this mutation.
func (m *QuestionMutation) FinishedAtCleared() bool {
	_, ok := m.clearedFields[question.FieldFinishedAt]
	return ok
}

// ResetFinishedAt resets all changes to the "finished_at" field.
func (m *QuestionMutation) ResetFinishedAt() {
	m.finished_at = nil
	delete(m.clearedFields, question.FieldFinishedAt)
}

// SetCratedAt sets the "crated_at" field.
func (m *QuestionMutation) SetCratedAt(t time.Time) {
	m.crated_at = &t
}

// CratedAt returns the value of the "crated_at" field in the mutation.
func (m *QuestionMutation) CratedAt() (r time.Time, exists bool) {
	v := m.crated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCratedAt returns the old "crated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCratedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCratedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCratedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCratedAt: %w", err)
	}
	return oldValue.CratedAt, nil
}

// ResetCratedAt resets all changes to the "crated_at" field.
func (m *QuestionMutation) ResetCratedAt() {
	m.crated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *QuestionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[question.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *QuestionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[question.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, question.FieldUpdatedAt)
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *QuestionMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *QuestionMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *QuestionMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *QuestionMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *QuestionMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by ids.
func (m *QuestionMutation) AddAnswerIDs(ids ...int) {
	if m.answers == nil {
		m.answers = make(map[int]struct{})
	}
	for i := range ids {
		m.answers[ids[i]] = struct{}{}
	}
}

// ClearAnswers clears the "answers" edge to the Answer entity.
func (m *QuestionMutation) ClearAnswers() {
	m.clearedanswers = true
}

// AnswersCleared reports if the "answers" edge to the Answer entity was cleared.
func (m *QuestionMutation) AnswersCleared() bool {
	return m.clearedanswers
}

// RemoveAnswerIDs removes the "answers" edge to the Answer entity by IDs.
func (m *QuestionMutation) RemoveAnswerIDs(ids ...int) {
	if m.removedanswers == nil {
		m.removedanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedanswers[ids[i]] = struct{}{}
	}
}

// RemovedAnswers returns the removed IDs of the "answers" edge to the Answer entity.
func (m *QuestionMutation) RemovedAnswersIDs() (ids []int) {
	for id := range m.removedanswers {
		ids = append(ids, id)
	}
	return
}

// AnswersIDs returns the "answers" edge IDs in the mutation.
func (m *QuestionMutation) AnswersIDs() (ids []int) {
	for id := range m.answers {
		ids = append(ids, id)
	}
	return
}

// ResetAnswers resets all changes to the "answers" edge.
func (m *QuestionMutation) ResetAnswers() {
	m.answers = nil
	m.clearedanswers = false
	m.removedanswers = nil
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by ids.
func (m *QuestionMutation) AddChoiceIDs(ids ...int) {
	if m.choices == nil {
		m.choices = make(map[int]struct{})
	}
	for i := range ids {
		m.choices[ids[i]] = struct{}{}
	}
}

// ClearChoices clears the "choices" edge to the Choice entity.
func (m *QuestionMutation) ClearChoices() {
	m.clearedchoices = true
}

// ChoicesCleared reports if the "choices" edge to the Choice entity was cleared.
func (m *QuestionMutation) ChoicesCleared() bool {
	return m.clearedchoices
}

// RemoveChoiceIDs removes the "choices" edge to the Choice entity by IDs.
func (m *QuestionMutation) RemoveChoiceIDs(ids ...int) {
	if m.removedchoices == nil {
		m.removedchoices = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchoices[ids[i]] = struct{}{}
	}
}

// RemovedChoices returns the removed IDs of the "choices" edge to the Choice entity.
func (m *QuestionMutation) RemovedChoicesIDs() (ids []int) {
	for id := range m.removedchoices {
		ids = append(ids, id)
	}
	return
}

// ChoicesIDs returns the "choices" edge IDs in the mutation.
func (m *QuestionMutation) ChoicesIDs() (ids []int) {
	for id := range m.choices {
		ids = append(ids, id)
	}
	return
}

// ResetChoices resets all changes to the "choices" edge.
func (m *QuestionMutation) ResetChoices() {
	m.choices = nil
	m.clearedchoices = false
	m.removedchoices = nil
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.title != nil {
		fields = append(fields, question.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, question.FieldContent)
	}
	if m.text_after_answered != nil {
		fields = append(fields, question.FieldTextAfterAnswered)
	}
	if m.enabled != nil {
		fields = append(fields, question.FieldEnabled)
	}
	if m.answer_type != nil {
		fields = append(fields, question.FieldAnswerType)
	}
	if m.published_at != nil {
		fields = append(fields, question.FieldPublishedAt)
	}
	if m.finished_at != nil {
		fields = append(fields, question.FieldFinishedAt)
	}
	if m.crated_at != nil {
		fields = append(fields, question.FieldCratedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, question.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldTitle:
		return m.Title()
	case question.FieldContent:
		return m.Content()
	case question.FieldTextAfterAnswered:
		return m.TextAfterAnswered()
	case question.FieldEnabled:
		return m.Enabled()
	case question.FieldAnswerType:
		return m.AnswerType()
	case question.FieldPublishedAt:
		return m.PublishedAt()
	case question.FieldFinishedAt:
		return m.FinishedAt()
	case question.FieldCratedAt:
		return m.CratedAt()
	case question.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldTitle:
		return m.OldTitle(ctx)
	case question.FieldContent:
		return m.OldContent(ctx)
	case question.FieldTextAfterAnswered:
		return m.OldTextAfterAnswered(ctx)
	case question.FieldEnabled:
		return m.OldEnabled(ctx)
	case question.FieldAnswerType:
		return m.OldAnswerType(ctx)
	case question.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case question.FieldFinishedAt:
		return m.OldFinishedAt(ctx)
	case question.FieldCratedAt:
		return m.OldCratedAt(ctx)
	case question.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case question.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case question.FieldTextAfterAnswered:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextAfterAnswered(v)
		return nil
	case question.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case question.FieldAnswerType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswerType(v)
		return nil
	case question.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case question.FieldFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishedAt(v)
		return nil
	case question.FieldCratedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCratedAt(v)
		return nil
	case question.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(question.FieldTextAfterAnswered) {
		fields = append(fields, question.FieldTextAfterAnswered)
	}
	if m.FieldCleared(question.FieldAnswerType) {
		fields = append(fields, question.FieldAnswerType)
	}
	if m.FieldCleared(question.FieldPublishedAt) {
		fields = append(fields, question.FieldPublishedAt)
	}
	if m.FieldCleared(question.FieldFinishedAt) {
		fields = append(fields, question.FieldFinishedAt)
	}
	if m.FieldCleared(question.FieldUpdatedAt) {
		fields = append(fields, question.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	switch name {
	case question.FieldTextAfterAnswered:
		m.ClearTextAfterAnswered()
		return nil
	case question.FieldAnswerType:
		m.ClearAnswerType()
		return nil
	case question.FieldPublishedAt:
		m.ClearPublishedAt()
		return nil
	case question.FieldFinishedAt:
		m.ClearFinishedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldTitle:
		m.ResetTitle()
		return nil
	case question.FieldContent:
		m.ResetContent()
		return nil
	case question.FieldTextAfterAnswered:
		m.ResetTextAfterAnswered()
		return nil
	case question.FieldEnabled:
		m.ResetEnabled()
		return nil
	case question.FieldAnswerType:
		m.ResetAnswerType()
		return nil
	case question.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case question.FieldFinishedAt:
		m.ResetFinishedAt()
		return nil
	case question.FieldCratedAt:
		m.ResetCratedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, question.EdgeOwner)
	}
	if m.answers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.choices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.answers))
		for id := range m.answers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.choices))
		for id := range m.choices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedanswers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.removedchoices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.removedanswers))
		for id := range m.removedanswers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.removedchoices))
		for id := range m.removedchoices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, question.EdgeOwner)
	}
	if m.clearedanswers {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.clearedchoices {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeOwner:
		return m.clearedowner
	case question.EdgeAnswers:
		return m.clearedanswers
	case question.EdgeChoices:
		return m.clearedchoices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeOwner:
		m.ResetOwner()
		return nil
	case question.EdgeAnswers:
		m.ResetAnswers()
		return nil
	case question.EdgeChoices:
		m.ResetChoices()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	username             *string
	icon                 *string
	email                *string
	password             *string
	description          *string
	crated_at            *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	questions            map[string]struct{}
	removedquestions     map[string]struct{}
	clearedquestions     bool
	answers              map[int]struct{}
	removedanswers       map[int]struct{}
	clearedanswers       bool
	choiceanswers        map[int]struct{}
	removedchoiceanswers map[int]struct{}
	clearedchoiceanswers bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetIcon sets the "icon" field.
func (m *UserMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *UserMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *UserMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[user.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *UserMutation) IconCleared() bool {
	_, ok := m.clearedFields[user.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *UserMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, user.FieldIcon)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetDescription sets the "description" field.
func (m *UserMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *UserMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[user.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *UserMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[user.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *UserMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, user.FieldDescription)
}

// SetCratedAt sets the "crated_at" field.
func (m *UserMutation) SetCratedAt(t time.Time) {
	m.crated_at = &t
}

// CratedAt returns the value of the "crated_at" field in the mutation.
func (m *UserMutation) CratedAt() (r time.Time, exists bool) {
	v := m.crated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCratedAt returns the old "crated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCratedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCratedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCratedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCratedAt: %w", err)
	}
	return oldValue.CratedAt, nil
}

// ResetCratedAt resets all changes to the "crated_at" field.
func (m *UserMutation) ResetCratedAt() {
	m.crated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *UserMutation) AddQuestionIDs(ids ...string) {
	if m.questions == nil {
		m.questions = make(map[string]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *UserMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the Question entity was cleared.
func (m *UserMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *UserMutation) RemoveQuestionIDs(ids ...string) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[string]struct{})
	}
	for i := range ids {
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *UserMutation) RemovedQuestionsIDs() (ids []string) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *UserMutation) QuestionsIDs() (ids []string) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *UserMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by ids.
func (m *UserMutation) AddAnswerIDs(ids ...int) {
	if m.answers == nil {
		m.answers = make(map[int]struct{})
	}
	for i := range ids {
		m.answers[ids[i]] = struct{}{}
	}
}

// ClearAnswers clears the "answers" edge to the Answer entity.
func (m *UserMutation) ClearAnswers() {
	m.clearedanswers = true
}

// AnswersCleared reports if the "answers" edge to the Answer entity was cleared.
func (m *UserMutation) AnswersCleared() bool {
	return m.clearedanswers
}

// RemoveAnswerIDs removes the "answers" edge to the Answer entity by IDs.
func (m *UserMutation) RemoveAnswerIDs(ids ...int) {
	if m.removedanswers == nil {
		m.removedanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedanswers[ids[i]] = struct{}{}
	}
}

// RemovedAnswers returns the removed IDs of the "answers" edge to the Answer entity.
func (m *UserMutation) RemovedAnswersIDs() (ids []int) {
	for id := range m.removedanswers {
		ids = append(ids, id)
	}
	return
}

// AnswersIDs returns the "answers" edge IDs in the mutation.
func (m *UserMutation) AnswersIDs() (ids []int) {
	for id := range m.answers {
		ids = append(ids, id)
	}
	return
}

// ResetAnswers resets all changes to the "answers" edge.
func (m *UserMutation) ResetAnswers() {
	m.answers = nil
	m.clearedanswers = false
	m.removedanswers = nil
}

// AddChoiceanswerIDs adds the "choiceanswers" edge to the ChoiceAnswer entity by ids.
func (m *UserMutation) AddChoiceanswerIDs(ids ...int) {
	if m.choiceanswers == nil {
		m.choiceanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.choiceanswers[ids[i]] = struct{}{}
	}
}

// ClearChoiceanswers clears the "choiceanswers" edge to the ChoiceAnswer entity.
func (m *UserMutation) ClearChoiceanswers() {
	m.clearedchoiceanswers = true
}

// ChoiceanswersCleared reports if the "choiceanswers" edge to the ChoiceAnswer entity was cleared.
func (m *UserMutation) ChoiceanswersCleared() bool {
	return m.clearedchoiceanswers
}

// RemoveChoiceanswerIDs removes the "choiceanswers" edge to the ChoiceAnswer entity by IDs.
func (m *UserMutation) RemoveChoiceanswerIDs(ids ...int) {
	if m.removedchoiceanswers == nil {
		m.removedchoiceanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchoiceanswers[ids[i]] = struct{}{}
	}
}

// RemovedChoiceanswers returns the removed IDs of the "choiceanswers" edge to the ChoiceAnswer entity.
func (m *UserMutation) RemovedChoiceanswersIDs() (ids []int) {
	for id := range m.removedchoiceanswers {
		ids = append(ids, id)
	}
	return
}

// ChoiceanswersIDs returns the "choiceanswers" edge IDs in the mutation.
func (m *UserMutation) ChoiceanswersIDs() (ids []int) {
	for id := range m.choiceanswers {
		ids = append(ids, id)
	}
	return
}

// ResetChoiceanswers resets all changes to the "choiceanswers" edge.
func (m *UserMutation) ResetChoiceanswers() {
	m.choiceanswers = nil
	m.clearedchoiceanswers = false
	m.removedchoiceanswers = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.icon != nil {
		fields = append(fields, user.FieldIcon)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.description != nil {
		fields = append(fields, user.FieldDescription)
	}
	if m.crated_at != nil {
		fields = append(fields, user.FieldCratedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldIcon:
		return m.Icon()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldDescription:
		return m.Description()
	case user.FieldCratedAt:
		return m.CratedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldIcon:
		return m.OldIcon(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldDescription:
		return m.OldDescription(ctx)
	case user.FieldCratedAt:
		return m.OldCratedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case user.FieldCratedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCratedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldIcon) {
		fields = append(fields, user.FieldIcon)
	}
	if m.FieldCleared(user.FieldDescription) {
		fields = append(fields, user.FieldDescription)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldIcon:
		m.ClearIcon()
		return nil
	case user.FieldDescription:
		m.ClearDescription()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldIcon:
		m.ResetIcon()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldDescription:
		m.ResetDescription()
		return nil
	case user.FieldCratedAt:
		m.ResetCratedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.questions != nil {
		edges = append(edges, user.EdgeQuestions)
	}
	if m.answers != nil {
		edges = append(edges, user.EdgeAnswers)
	}
	if m.choiceanswers != nil {
		edges = append(edges, user.EdgeChoiceanswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.answers))
		for id := range m.answers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeChoiceanswers:
		ids := make([]ent.Value, 0, len(m.choiceanswers))
		for id := range m.choiceanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedquestions != nil {
		edges = append(edges, user.EdgeQuestions)
	}
	if m.removedanswers != nil {
		edges = append(edges, user.EdgeAnswers)
	}
	if m.removedchoiceanswers != nil {
		edges = append(edges, user.EdgeChoiceanswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.removedanswers))
		for id := range m.removedanswers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeChoiceanswers:
		ids := make([]ent.Value, 0, len(m.removedchoiceanswers))
		for id := range m.removedchoiceanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedquestions {
		edges = append(edges, user.EdgeQuestions)
	}
	if m.clearedanswers {
		edges = append(edges, user.EdgeAnswers)
	}
	if m.clearedchoiceanswers {
		edges = append(edges, user.EdgeChoiceanswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeQuestions:
		return m.clearedquestions
	case user.EdgeAnswers:
		return m.clearedanswers
	case user.EdgeChoiceanswers:
		return m.clearedchoiceanswers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeQuestions:
		m.ResetQuestions()
		return nil
	case user.EdgeAnswers:
		m.ResetAnswers()
		return nil
	case user.EdgeChoiceanswers:
		m.ResetChoiceanswers()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
