// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/ent/question"
	"server/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// TextAfterAnswered holds the value of the "text_after_answered" field.
	TextAfterAnswered string `json:"text_after_answered,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// AnswerType holds the value of the "answer_type" field.
	AnswerType string `json:"answer_type,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// CratedAt holds the value of the "crated_at" field.
	CratedAt time.Time `json:"crated_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges          QuestionEdges `json:"edges"`
	user_questions *string
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Answers holds the value of the answers edge.
	Answers []*Answer `json:"answers,omitempty"`
	// Choices holds the value of the choices edge.
	Choices []*Choice `json:"choices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AnswersOrErr returns the Answers value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) AnswersOrErr() ([]*Answer, error) {
	if e.loadedTypes[1] {
		return e.Answers, nil
	}
	return nil, &NotLoadedError{edge: "answers"}
}

// ChoicesOrErr returns the Choices value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) ChoicesOrErr() ([]*Choice, error) {
	if e.loadedTypes[2] {
		return e.Choices, nil
	}
	return nil, &NotLoadedError{edge: "choices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldEnabled:
			values[i] = new(sql.NullBool)
		case question.FieldID, question.FieldTitle, question.FieldContent, question.FieldTextAfterAnswered, question.FieldAnswerType:
			values[i] = new(sql.NullString)
		case question.FieldPublishedAt, question.FieldFinishedAt, question.FieldCratedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case question.ForeignKeys[0]: // user_questions
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Question", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				q.ID = value.String
			}
		case question.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				q.Title = value.String
			}
		case question.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				q.Content = value.String
			}
		case question.FieldTextAfterAnswered:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_after_answered", values[i])
			} else if value.Valid {
				q.TextAfterAnswered = value.String
			}
		case question.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				q.Enabled = value.Bool
			}
		case question.FieldAnswerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer_type", values[i])
			} else if value.Valid {
				q.AnswerType = value.String
			}
		case question.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				q.PublishedAt = value.Time
			}
		case question.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				q.FinishedAt = value.Time
			}
		case question.FieldCratedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crated_at", values[i])
			} else if value.Valid {
				q.CratedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_questions", values[i])
			} else if value.Valid {
				q.user_questions = new(string)
				*q.user_questions = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Question entity.
func (q *Question) QueryOwner() *UserQuery {
	return (&QuestionClient{config: q.config}).QueryOwner(q)
}

// QueryAnswers queries the "answers" edge of the Question entity.
func (q *Question) QueryAnswers() *AnswerQuery {
	return (&QuestionClient{config: q.config}).QueryAnswers(q)
}

// QueryChoices queries the "choices" edge of the Question entity.
func (q *Question) QueryChoices() *ChoiceQuery {
	return (&QuestionClient{config: q.config}).QueryChoices(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return (&QuestionClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", title=")
	builder.WriteString(q.Title)
	builder.WriteString(", content=")
	builder.WriteString(q.Content)
	builder.WriteString(", text_after_answered=")
	builder.WriteString(q.TextAfterAnswered)
	builder.WriteString(", enabled=")
	builder.WriteString(fmt.Sprintf("%v", q.Enabled))
	builder.WriteString(", answer_type=")
	builder.WriteString(q.AnswerType)
	builder.WriteString(", published_at=")
	builder.WriteString(q.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", finished_at=")
	builder.WriteString(q.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", crated_at=")
	builder.WriteString(q.CratedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question

func (q Questions) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
