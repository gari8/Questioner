// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"faves4/ent/choice"
	"faves4/ent/choiceanswer"
	"faves4/ent/question"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChoiceCreate is the builder for creating a Choice entity.
type ChoiceCreate struct {
	config
	mutation *ChoiceMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (cc *ChoiceCreate) SetContent(s string) *ChoiceCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetParentID sets the "parent" edge to the Question entity by ID.
func (cc *ChoiceCreate) SetParentID(id string) *ChoiceCreate {
	cc.mutation.SetParentID(id)
	return cc
}

// SetNillableParentID sets the "parent" edge to the Question entity by ID if the given value is not nil.
func (cc *ChoiceCreate) SetNillableParentID(id *string) *ChoiceCreate {
	if id != nil {
		cc = cc.SetParentID(*id)
	}
	return cc
}

// SetParent sets the "parent" edge to the Question entity.
func (cc *ChoiceCreate) SetParent(q *Question) *ChoiceCreate {
	return cc.SetParentID(q.ID)
}

// AddChoiceanswerIDs adds the "choiceanswers" edge to the ChoiceAnswer entity by IDs.
func (cc *ChoiceCreate) AddChoiceanswerIDs(ids ...int) *ChoiceCreate {
	cc.mutation.AddChoiceanswerIDs(ids...)
	return cc
}

// AddChoiceanswers adds the "choiceanswers" edges to the ChoiceAnswer entity.
func (cc *ChoiceCreate) AddChoiceanswers(c ...*ChoiceAnswer) *ChoiceCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChoiceanswerIDs(ids...)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cc *ChoiceCreate) Mutation() *ChoiceMutation {
	return cc.mutation
}

// Save creates the Choice in the database.
func (cc *ChoiceCreate) Save(ctx context.Context) (*Choice, error) {
	var (
		err  error
		node *Choice
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChoiceCreate) SaveX(ctx context.Context) *Choice {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChoiceCreate) check() error {
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	if v, ok := cc.mutation.Content(); ok {
		if err := choice.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (cc *ChoiceCreate) sqlSave(ctx context.Context) (*Choice, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ChoiceCreate) createSpec() (*Choice, *sqlgraph.CreateSpec) {
	var (
		_node = &Choice{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: choice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: choice.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: choice.FieldContent,
		})
		_node.Content = value
	}
	if nodes := cc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentTable,
			Columns: []string{choice.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_choices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChoiceanswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChoiceCreateBulk is the builder for creating many Choice entities in bulk.
type ChoiceCreateBulk struct {
	config
	builders []*ChoiceCreate
}

// Save creates the Choice entities in the database.
func (ccb *ChoiceCreateBulk) Save(ctx context.Context) ([]*Choice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Choice, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChoiceCreateBulk) SaveX(ctx context.Context) []*Choice {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
