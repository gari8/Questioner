// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"faves4/ent/choice"
	"faves4/ent/choiceanswer"
	"faves4/ent/predicate"
	"faves4/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChoiceAnswerUpdate is the builder for updating ChoiceAnswer entities.
type ChoiceAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *ChoiceAnswerMutation
}

// Where adds a new predicate for the ChoiceAnswerUpdate builder.
func (cau *ChoiceAnswerUpdate) Where(ps ...predicate.ChoiceAnswer) *ChoiceAnswerUpdate {
	cau.mutation.predicates = append(cau.mutation.predicates, ps...)
	return cau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cau *ChoiceAnswerUpdate) SetOwnerID(id string) *ChoiceAnswerUpdate {
	cau.mutation.SetOwnerID(id)
	return cau
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cau *ChoiceAnswerUpdate) SetNillableOwnerID(id *string) *ChoiceAnswerUpdate {
	if id != nil {
		cau = cau.SetOwnerID(*id)
	}
	return cau
}

// SetOwner sets the "owner" edge to the User entity.
func (cau *ChoiceAnswerUpdate) SetOwner(u *User) *ChoiceAnswerUpdate {
	return cau.SetOwnerID(u.ID)
}

// SetParentID sets the "parent" edge to the Choice entity by ID.
func (cau *ChoiceAnswerUpdate) SetParentID(id int) *ChoiceAnswerUpdate {
	cau.mutation.SetParentID(id)
	return cau
}

// SetNillableParentID sets the "parent" edge to the Choice entity by ID if the given value is not nil.
func (cau *ChoiceAnswerUpdate) SetNillableParentID(id *int) *ChoiceAnswerUpdate {
	if id != nil {
		cau = cau.SetParentID(*id)
	}
	return cau
}

// SetParent sets the "parent" edge to the Choice entity.
func (cau *ChoiceAnswerUpdate) SetParent(c *Choice) *ChoiceAnswerUpdate {
	return cau.SetParentID(c.ID)
}

// Mutation returns the ChoiceAnswerMutation object of the builder.
func (cau *ChoiceAnswerUpdate) Mutation() *ChoiceAnswerMutation {
	return cau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cau *ChoiceAnswerUpdate) ClearOwner() *ChoiceAnswerUpdate {
	cau.mutation.ClearOwner()
	return cau
}

// ClearParent clears the "parent" edge to the Choice entity.
func (cau *ChoiceAnswerUpdate) ClearParent() *ChoiceAnswerUpdate {
	cau.mutation.ClearParent()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *ChoiceAnswerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cau.hooks) == 0 {
		affected, err = cau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChoiceAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cau.mutation = mutation
			affected, err = cau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cau.hooks) - 1; i >= 0; i-- {
			mut = cau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cau *ChoiceAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *ChoiceAnswerUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *ChoiceAnswerUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cau *ChoiceAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   choiceanswer.Table,
			Columns: choiceanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: choiceanswer.FieldID,
			},
		},
	}
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.OwnerTable,
			Columns: []string{choiceanswer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.OwnerTable,
			Columns: []string{choiceanswer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.ParentTable,
			Columns: []string{choiceanswer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.ParentTable,
			Columns: []string{choiceanswer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choiceanswer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChoiceAnswerUpdateOne is the builder for updating a single ChoiceAnswer entity.
type ChoiceAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChoiceAnswerMutation
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cauo *ChoiceAnswerUpdateOne) SetOwnerID(id string) *ChoiceAnswerUpdateOne {
	cauo.mutation.SetOwnerID(id)
	return cauo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cauo *ChoiceAnswerUpdateOne) SetNillableOwnerID(id *string) *ChoiceAnswerUpdateOne {
	if id != nil {
		cauo = cauo.SetOwnerID(*id)
	}
	return cauo
}

// SetOwner sets the "owner" edge to the User entity.
func (cauo *ChoiceAnswerUpdateOne) SetOwner(u *User) *ChoiceAnswerUpdateOne {
	return cauo.SetOwnerID(u.ID)
}

// SetParentID sets the "parent" edge to the Choice entity by ID.
func (cauo *ChoiceAnswerUpdateOne) SetParentID(id int) *ChoiceAnswerUpdateOne {
	cauo.mutation.SetParentID(id)
	return cauo
}

// SetNillableParentID sets the "parent" edge to the Choice entity by ID if the given value is not nil.
func (cauo *ChoiceAnswerUpdateOne) SetNillableParentID(id *int) *ChoiceAnswerUpdateOne {
	if id != nil {
		cauo = cauo.SetParentID(*id)
	}
	return cauo
}

// SetParent sets the "parent" edge to the Choice entity.
func (cauo *ChoiceAnswerUpdateOne) SetParent(c *Choice) *ChoiceAnswerUpdateOne {
	return cauo.SetParentID(c.ID)
}

// Mutation returns the ChoiceAnswerMutation object of the builder.
func (cauo *ChoiceAnswerUpdateOne) Mutation() *ChoiceAnswerMutation {
	return cauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cauo *ChoiceAnswerUpdateOne) ClearOwner() *ChoiceAnswerUpdateOne {
	cauo.mutation.ClearOwner()
	return cauo
}

// ClearParent clears the "parent" edge to the Choice entity.
func (cauo *ChoiceAnswerUpdateOne) ClearParent() *ChoiceAnswerUpdateOne {
	cauo.mutation.ClearParent()
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *ChoiceAnswerUpdateOne) Select(field string, fields ...string) *ChoiceAnswerUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated ChoiceAnswer entity.
func (cauo *ChoiceAnswerUpdateOne) Save(ctx context.Context) (*ChoiceAnswer, error) {
	var (
		err  error
		node *ChoiceAnswer
	)
	if len(cauo.hooks) == 0 {
		node, err = cauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChoiceAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cauo.mutation = mutation
			node, err = cauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cauo.hooks) - 1; i >= 0; i-- {
			mut = cauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *ChoiceAnswerUpdateOne) SaveX(ctx context.Context) *ChoiceAnswer {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *ChoiceAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *ChoiceAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cauo *ChoiceAnswerUpdateOne) sqlSave(ctx context.Context) (_node *ChoiceAnswer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   choiceanswer.Table,
			Columns: choiceanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: choiceanswer.FieldID,
			},
		},
	}
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ChoiceAnswer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, choiceanswer.FieldID)
		for _, f := range fields {
			if !choiceanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != choiceanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.OwnerTable,
			Columns: []string{choiceanswer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.OwnerTable,
			Columns: []string{choiceanswer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.ParentTable,
			Columns: []string{choiceanswer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choiceanswer.ParentTable,
			Columns: []string{choiceanswer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChoiceAnswer{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choiceanswer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
