// Code generated by entc, DO NOT EDIT.

package ent

import (
	"faves4/ent/choice"
	"faves4/ent/question"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Choice is the model entity for the Choice schema.
type Choice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChoiceQuery when eager-loading is set.
	Edges            ChoiceEdges `json:"edges"`
	question_choices *string
}

// ChoiceEdges holds the relations/edges for other nodes in the graph.
type ChoiceEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Question `json:"parent,omitempty"`
	// Choiceanswers holds the value of the choiceanswers edge.
	Choiceanswers []*ChoiceAnswer `json:"choiceanswers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChoiceEdges) ParentOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChoiceanswersOrErr returns the Choiceanswers value or an error if the edge
// was not loaded in eager-loading.
func (e ChoiceEdges) ChoiceanswersOrErr() ([]*ChoiceAnswer, error) {
	if e.loadedTypes[1] {
		return e.Choiceanswers, nil
	}
	return nil, &NotLoadedError{edge: "choiceanswers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Choice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case choice.FieldID:
			values[i] = new(sql.NullInt64)
		case choice.FieldContent:
			values[i] = new(sql.NullString)
		case choice.ForeignKeys[0]: // question_choices
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Choice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Choice fields.
func (c *Choice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case choice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case choice.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case choice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question_choices", values[i])
			} else if value.Valid {
				c.question_choices = new(string)
				*c.question_choices = value.String
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the Choice entity.
func (c *Choice) QueryParent() *QuestionQuery {
	return (&ChoiceClient{config: c.config}).QueryParent(c)
}

// QueryChoiceanswers queries the "choiceanswers" edge of the Choice entity.
func (c *Choice) QueryChoiceanswers() *ChoiceAnswerQuery {
	return (&ChoiceClient{config: c.config}).QueryChoiceanswers(c)
}

// Update returns a builder for updating this Choice.
// Note that you need to call Choice.Unwrap() before calling this method if this Choice
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Choice) Update() *ChoiceUpdateOne {
	return (&ChoiceClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Choice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Choice) Unwrap() *Choice {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Choice is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Choice) String() string {
	var builder strings.Builder
	builder.WriteString("Choice(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", content=")
	builder.WriteString(c.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Choices is a parsable slice of Choice.
type Choices []*Choice

func (c Choices) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
