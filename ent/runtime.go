// Code generated by entc, DO NOT EDIT.

package ent

import (
	"server/ent/answer"
	"server/ent/choice"
	"server/ent/choiceanswer"
	"server/ent/question"
	"server/ent/schema"
	"server/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	answerFields := schema.Answer{}.Fields()
	_ = answerFields
	// answerDescContent is the schema descriptor for content field.
	answerDescContent := answerFields[1].Descriptor()
	// answer.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	answer.ContentValidator = answerDescContent.Validators[0].(func(string) error)
	// answerDescCratedAt is the schema descriptor for crated_at field.
	answerDescCratedAt := answerFields[2].Descriptor()
	// answer.DefaultCratedAt holds the default value on creation for the crated_at field.
	answer.DefaultCratedAt = answerDescCratedAt.Default.(func() time.Time)
	choiceFields := schema.Choice{}.Fields()
	_ = choiceFields
	// choiceDescContent is the schema descriptor for content field.
	choiceDescContent := choiceFields[0].Descriptor()
	// choice.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	choice.ContentValidator = choiceDescContent.Validators[0].(func(string) error)
	choiceanswerFields := schema.ChoiceAnswer{}.Fields()
	_ = choiceanswerFields
	// choiceanswerDescCratedAt is the schema descriptor for crated_at field.
	choiceanswerDescCratedAt := choiceanswerFields[0].Descriptor()
	// choiceanswer.DefaultCratedAt holds the default value on creation for the crated_at field.
	choiceanswer.DefaultCratedAt = choiceanswerDescCratedAt.Default.(func() time.Time)
	questionFields := schema.Question{}.Fields()
	_ = questionFields
	// questionDescTitle is the schema descriptor for title field.
	questionDescTitle := questionFields[1].Descriptor()
	// question.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	question.TitleValidator = questionDescTitle.Validators[0].(func(string) error)
	// questionDescContent is the schema descriptor for content field.
	questionDescContent := questionFields[2].Descriptor()
	// question.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	question.ContentValidator = questionDescContent.Validators[0].(func(string) error)
	// questionDescEnabled is the schema descriptor for enabled field.
	questionDescEnabled := questionFields[4].Descriptor()
	// question.DefaultEnabled holds the default value on creation for the enabled field.
	question.DefaultEnabled = questionDescEnabled.Default.(bool)
	// questionDescCratedAt is the schema descriptor for crated_at field.
	questionDescCratedAt := questionFields[8].Descriptor()
	// question.DefaultCratedAt holds the default value on creation for the crated_at field.
	question.DefaultCratedAt = questionDescCratedAt.Default.(func() time.Time)
	// questionDescID is the schema descriptor for id field.
	questionDescID := questionFields[0].Descriptor()
	// question.IDValidator is a validator for the "id" field. It is called by the builders before save.
	question.IDValidator = questionDescID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCratedAt is the schema descriptor for crated_at field.
	userDescCratedAt := userFields[6].Descriptor()
	// user.DefaultCratedAt holds the default value on creation for the crated_at field.
	user.DefaultCratedAt = userDescCratedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
