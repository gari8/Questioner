// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"faves4/ent/answer"
	"faves4/ent/choice"
	"faves4/ent/predicate"
	"faves4/ent/question"
	"faves4/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where adds a new predicate for the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.predicates = append(qu.mutation.predicates, ps...)
	return qu
}

// SetTitle sets the "title" field.
func (qu *QuestionUpdate) SetTitle(s string) *QuestionUpdate {
	qu.mutation.SetTitle(s)
	return qu
}

// SetContent sets the "content" field.
func (qu *QuestionUpdate) SetContent(s string) *QuestionUpdate {
	qu.mutation.SetContent(s)
	return qu
}

// SetTextAfterAnswered sets the "text_after_answered" field.
func (qu *QuestionUpdate) SetTextAfterAnswered(s string) *QuestionUpdate {
	qu.mutation.SetTextAfterAnswered(s)
	return qu
}

// SetNillableTextAfterAnswered sets the "text_after_answered" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableTextAfterAnswered(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetTextAfterAnswered(*s)
	}
	return qu
}

// SetEnabled sets the "enabled" field.
func (qu *QuestionUpdate) SetEnabled(b bool) *QuestionUpdate {
	qu.mutation.SetEnabled(b)
	return qu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableEnabled(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetEnabled(*b)
	}
	return qu
}

// SetAnswerType sets the "answer_type" field.
func (qu *QuestionUpdate) SetAnswerType(s string) *QuestionUpdate {
	qu.mutation.SetAnswerType(s)
	return qu
}

// SetPublishedAt sets the "published_at" field.
func (qu *QuestionUpdate) SetPublishedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetPublishedAt(t)
	return qu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillablePublishedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetPublishedAt(*t)
	}
	return qu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (qu *QuestionUpdate) ClearPublishedAt() *QuestionUpdate {
	qu.mutation.ClearPublishedAt()
	return qu
}

// SetFinishedAt sets the "finished_at" field.
func (qu *QuestionUpdate) SetFinishedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetFinishedAt(t)
	return qu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableFinishedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetFinishedAt(*t)
	}
	return qu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (qu *QuestionUpdate) ClearFinishedAt() *QuestionUpdate {
	qu.mutation.ClearFinishedAt()
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableUpdatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetUpdatedAt(*t)
	}
	return qu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (qu *QuestionUpdate) ClearUpdatedAt() *QuestionUpdate {
	qu.mutation.ClearUpdatedAt()
	return qu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (qu *QuestionUpdate) SetOwnerID(id string) *QuestionUpdate {
	qu.mutation.SetOwnerID(id)
	return qu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableOwnerID(id *string) *QuestionUpdate {
	if id != nil {
		qu = qu.SetOwnerID(*id)
	}
	return qu
}

// SetOwner sets the "owner" edge to the User entity.
func (qu *QuestionUpdate) SetOwner(u *User) *QuestionUpdate {
	return qu.SetOwnerID(u.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddAnswerIDs(ids...)
	return qu
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qu *QuestionUpdate) AddAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddAnswerIDs(ids...)
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (qu *QuestionUpdate) AddChoiceIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddChoiceIDs(ids...)
	return qu
}

// AddChoices adds the "choices" edges to the Choice entity.
func (qu *QuestionUpdate) AddChoices(c ...*Choice) *QuestionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qu.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (qu *QuestionUpdate) ClearOwner() *QuestionUpdate {
	qu.mutation.ClearOwner()
	return qu
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qu *QuestionUpdate) ClearAnswers() *QuestionUpdate {
	qu.mutation.ClearAnswers()
	return qu
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveAnswerIDs(ids...)
	return qu
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qu *QuestionUpdate) RemoveAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveAnswerIDs(ids...)
}

// ClearChoices clears all "choices" edges to the Choice entity.
func (qu *QuestionUpdate) ClearChoices() *QuestionUpdate {
	qu.mutation.ClearChoices()
	return qu
}

// RemoveChoiceIDs removes the "choices" edge to Choice entities by IDs.
func (qu *QuestionUpdate) RemoveChoiceIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveChoiceIDs(ids...)
	return qu
}

// RemoveChoices removes "choices" edges to Choice entities.
func (qu *QuestionUpdate) RemoveChoices(c ...*Choice) *QuestionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qu.RemoveChoiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		if err = qu.check(); err != nil {
			return 0, err
		}
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qu.check(); err != nil {
				return 0, err
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := qu.mutation.Content(); ok {
		if err := question.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := qu.mutation.AnswerType(); ok {
		if err := question.AnswerTypeValidator(v); err != nil {
			return &ValidationError{Name: "answer_type", err: fmt.Errorf("ent: validator failed for field \"answer_type\": %w", err)}
		}
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   question.Table,
			Columns: question.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: question.FieldID,
			},
		},
	}
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldTitle,
		})
	}
	if value, ok := qu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldContent,
		})
	}
	if value, ok := qu.mutation.TextAfterAnswered(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldTextAfterAnswered,
		})
	}
	if value, ok := qu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: question.FieldEnabled,
		})
	}
	if value, ok := qu.mutation.AnswerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldAnswerType,
		})
	}
	if value, ok := qu.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldPublishedAt,
		})
	}
	if qu.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldPublishedAt,
		})
	}
	if value, ok := qu.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldFinishedAt,
		})
	}
	if qu.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldFinishedAt,
		})
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldUpdatedAt,
		})
	}
	if qu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldUpdatedAt,
		})
	}
	if qu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.OwnerTable,
			Columns: []string{question.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.OwnerTable,
			Columns: []string{question.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedChoicesIDs(); len(nodes) > 0 && !qu.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetTitle sets the "title" field.
func (quo *QuestionUpdateOne) SetTitle(s string) *QuestionUpdateOne {
	quo.mutation.SetTitle(s)
	return quo
}

// SetContent sets the "content" field.
func (quo *QuestionUpdateOne) SetContent(s string) *QuestionUpdateOne {
	quo.mutation.SetContent(s)
	return quo
}

// SetTextAfterAnswered sets the "text_after_answered" field.
func (quo *QuestionUpdateOne) SetTextAfterAnswered(s string) *QuestionUpdateOne {
	quo.mutation.SetTextAfterAnswered(s)
	return quo
}

// SetNillableTextAfterAnswered sets the "text_after_answered" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableTextAfterAnswered(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetTextAfterAnswered(*s)
	}
	return quo
}

// SetEnabled sets the "enabled" field.
func (quo *QuestionUpdateOne) SetEnabled(b bool) *QuestionUpdateOne {
	quo.mutation.SetEnabled(b)
	return quo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableEnabled(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetEnabled(*b)
	}
	return quo
}

// SetAnswerType sets the "answer_type" field.
func (quo *QuestionUpdateOne) SetAnswerType(s string) *QuestionUpdateOne {
	quo.mutation.SetAnswerType(s)
	return quo
}

// SetPublishedAt sets the "published_at" field.
func (quo *QuestionUpdateOne) SetPublishedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetPublishedAt(t)
	return quo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillablePublishedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetPublishedAt(*t)
	}
	return quo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (quo *QuestionUpdateOne) ClearPublishedAt() *QuestionUpdateOne {
	quo.mutation.ClearPublishedAt()
	return quo
}

// SetFinishedAt sets the "finished_at" field.
func (quo *QuestionUpdateOne) SetFinishedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetFinishedAt(t)
	return quo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableFinishedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetFinishedAt(*t)
	}
	return quo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (quo *QuestionUpdateOne) ClearFinishedAt() *QuestionUpdateOne {
	quo.mutation.ClearFinishedAt()
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableUpdatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetUpdatedAt(*t)
	}
	return quo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (quo *QuestionUpdateOne) ClearUpdatedAt() *QuestionUpdateOne {
	quo.mutation.ClearUpdatedAt()
	return quo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (quo *QuestionUpdateOne) SetOwnerID(id string) *QuestionUpdateOne {
	quo.mutation.SetOwnerID(id)
	return quo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableOwnerID(id *string) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetOwnerID(*id)
	}
	return quo
}

// SetOwner sets the "owner" edge to the User entity.
func (quo *QuestionUpdateOne) SetOwner(u *User) *QuestionUpdateOne {
	return quo.SetOwnerID(u.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddAnswerIDs(ids...)
	return quo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddAnswerIDs(ids...)
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (quo *QuestionUpdateOne) AddChoiceIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddChoiceIDs(ids...)
	return quo
}

// AddChoices adds the "choices" edges to the Choice entity.
func (quo *QuestionUpdateOne) AddChoices(c ...*Choice) *QuestionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return quo.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (quo *QuestionUpdateOne) ClearOwner() *QuestionUpdateOne {
	quo.mutation.ClearOwner()
	return quo
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearAnswers() *QuestionUpdateOne {
	quo.mutation.ClearAnswers()
	return quo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveAnswerIDs(ids...)
	return quo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveAnswerIDs(ids...)
}

// ClearChoices clears all "choices" edges to the Choice entity.
func (quo *QuestionUpdateOne) ClearChoices() *QuestionUpdateOne {
	quo.mutation.ClearChoices()
	return quo
}

// RemoveChoiceIDs removes the "choices" edge to Choice entities by IDs.
func (quo *QuestionUpdateOne) RemoveChoiceIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveChoiceIDs(ids...)
	return quo
}

// RemoveChoices removes "choices" edges to Choice entities.
func (quo *QuestionUpdateOne) RemoveChoices(c ...*Choice) *QuestionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return quo.RemoveChoiceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	var (
		err  error
		node *Question
	)
	if len(quo.hooks) == 0 {
		if err = quo.check(); err != nil {
			return nil, err
		}
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = quo.check(); err != nil {
				return nil, err
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := quo.mutation.Content(); ok {
		if err := question.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := quo.mutation.AnswerType(); ok {
		if err := question.AnswerTypeValidator(v); err != nil {
			return &ValidationError{Name: "answer_type", err: fmt.Errorf("ent: validator failed for field \"answer_type\": %w", err)}
		}
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   question.Table,
			Columns: question.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: question.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Question.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldTitle,
		})
	}
	if value, ok := quo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldContent,
		})
	}
	if value, ok := quo.mutation.TextAfterAnswered(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldTextAfterAnswered,
		})
	}
	if value, ok := quo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: question.FieldEnabled,
		})
	}
	if value, ok := quo.mutation.AnswerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: question.FieldAnswerType,
		})
	}
	if value, ok := quo.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldPublishedAt,
		})
	}
	if quo.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldPublishedAt,
		})
	}
	if value, ok := quo.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldFinishedAt,
		})
	}
	if quo.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldFinishedAt,
		})
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: question.FieldUpdatedAt,
		})
	}
	if quo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: question.FieldUpdatedAt,
		})
	}
	if quo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.OwnerTable,
			Columns: []string{question.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.OwnerTable,
			Columns: []string{question.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedChoicesIDs(); len(nodes) > 0 && !quo.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
