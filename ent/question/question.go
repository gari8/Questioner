// Code generated by entc, DO NOT EDIT.

package question

import (
	"time"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldTextAfterAnswered holds the string denoting the text_after_answered field in the database.
	FieldTextAfterAnswered = "text_after_answered"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldAnswerType holds the string denoting the answer_type field in the database.
	FieldAnswerType = "answer_type"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldCratedAt holds the string denoting the crated_at field in the database.
	FieldCratedAt = "crated_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAnswers holds the string denoting the answers edge name in mutations.
	EdgeAnswers = "answers"
	// EdgeChoices holds the string denoting the choices edge name in mutations.
	EdgeChoices = "choices"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "questions"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_questions"
	// AnswersTable is the table the holds the answers relation/edge.
	AnswersTable = "answers"
	// AnswersInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswersInverseTable = "answers"
	// AnswersColumn is the table column denoting the answers relation/edge.
	AnswersColumn = "question_answers"
	// ChoicesTable is the table the holds the choices relation/edge.
	ChoicesTable = "choices"
	// ChoicesInverseTable is the table name for the Choice entity.
	// It exists in this package in order to avoid circular dependency with the "choice" package.
	ChoicesInverseTable = "choices"
	// ChoicesColumn is the table column denoting the choices relation/edge.
	ChoicesColumn = "question_choices"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldTextAfterAnswered,
	FieldEnabled,
	FieldAnswerType,
	FieldPublishedAt,
	FieldFinishedAt,
	FieldCratedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "questions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_questions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultCratedAt holds the default value on creation for the "crated_at" field.
	DefaultCratedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
