// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"server/ent/choice"
	"server/ent/choiceanswer"
	"server/ent/predicate"
	"server/ent/question"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChoiceUpdate is the builder for updating Choice entities.
type ChoiceUpdate struct {
	config
	hooks    []Hook
	mutation *ChoiceMutation
}

// Where adds a new predicate for the ChoiceUpdate builder.
func (cu *ChoiceUpdate) Where(ps ...predicate.Choice) *ChoiceUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetContent sets the "content" field.
func (cu *ChoiceUpdate) SetContent(s string) *ChoiceUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetParentID sets the "parent" edge to the Question entity by ID.
func (cu *ChoiceUpdate) SetParentID(id string) *ChoiceUpdate {
	cu.mutation.SetParentID(id)
	return cu
}

// SetNillableParentID sets the "parent" edge to the Question entity by ID if the given value is not nil.
func (cu *ChoiceUpdate) SetNillableParentID(id *string) *ChoiceUpdate {
	if id != nil {
		cu = cu.SetParentID(*id)
	}
	return cu
}

// SetParent sets the "parent" edge to the Question entity.
func (cu *ChoiceUpdate) SetParent(q *Question) *ChoiceUpdate {
	return cu.SetParentID(q.ID)
}

// AddChoiceanswerIDs adds the "choiceanswers" edge to the ChoiceAnswer entity by IDs.
func (cu *ChoiceUpdate) AddChoiceanswerIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.AddChoiceanswerIDs(ids...)
	return cu
}

// AddChoiceanswers adds the "choiceanswers" edges to the ChoiceAnswer entity.
func (cu *ChoiceUpdate) AddChoiceanswers(c ...*ChoiceAnswer) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChoiceanswerIDs(ids...)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cu *ChoiceUpdate) Mutation() *ChoiceMutation {
	return cu.mutation
}

// ClearParent clears the "parent" edge to the Question entity.
func (cu *ChoiceUpdate) ClearParent() *ChoiceUpdate {
	cu.mutation.ClearParent()
	return cu
}

// ClearChoiceanswers clears all "choiceanswers" edges to the ChoiceAnswer entity.
func (cu *ChoiceUpdate) ClearChoiceanswers() *ChoiceUpdate {
	cu.mutation.ClearChoiceanswers()
	return cu
}

// RemoveChoiceanswerIDs removes the "choiceanswers" edge to ChoiceAnswer entities by IDs.
func (cu *ChoiceUpdate) RemoveChoiceanswerIDs(ids ...int) *ChoiceUpdate {
	cu.mutation.RemoveChoiceanswerIDs(ids...)
	return cu
}

// RemoveChoiceanswers removes "choiceanswers" edges to ChoiceAnswer entities.
func (cu *ChoiceUpdate) RemoveChoiceanswers(c ...*ChoiceAnswer) *ChoiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChoiceanswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChoiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChoiceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChoiceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChoiceUpdate) check() error {
	if v, ok := cu.mutation.Content(); ok {
		if err := choice.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (cu *ChoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   choice.Table,
			Columns: choice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: choice.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: choice.FieldContent,
		})
	}
	if cu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentTable,
			Columns: []string{choice.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentTable,
			Columns: []string{choice.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChoiceanswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChoiceanswersIDs(); len(nodes) > 0 && !cu.mutation.ChoiceanswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChoiceanswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChoiceUpdateOne is the builder for updating a single Choice entity.
type ChoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChoiceMutation
}

// SetContent sets the "content" field.
func (cuo *ChoiceUpdateOne) SetContent(s string) *ChoiceUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetParentID sets the "parent" edge to the Question entity by ID.
func (cuo *ChoiceUpdateOne) SetParentID(id string) *ChoiceUpdateOne {
	cuo.mutation.SetParentID(id)
	return cuo
}

// SetNillableParentID sets the "parent" edge to the Question entity by ID if the given value is not nil.
func (cuo *ChoiceUpdateOne) SetNillableParentID(id *string) *ChoiceUpdateOne {
	if id != nil {
		cuo = cuo.SetParentID(*id)
	}
	return cuo
}

// SetParent sets the "parent" edge to the Question entity.
func (cuo *ChoiceUpdateOne) SetParent(q *Question) *ChoiceUpdateOne {
	return cuo.SetParentID(q.ID)
}

// AddChoiceanswerIDs adds the "choiceanswers" edge to the ChoiceAnswer entity by IDs.
func (cuo *ChoiceUpdateOne) AddChoiceanswerIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.AddChoiceanswerIDs(ids...)
	return cuo
}

// AddChoiceanswers adds the "choiceanswers" edges to the ChoiceAnswer entity.
func (cuo *ChoiceUpdateOne) AddChoiceanswers(c ...*ChoiceAnswer) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChoiceanswerIDs(ids...)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cuo *ChoiceUpdateOne) Mutation() *ChoiceMutation {
	return cuo.mutation
}

// ClearParent clears the "parent" edge to the Question entity.
func (cuo *ChoiceUpdateOne) ClearParent() *ChoiceUpdateOne {
	cuo.mutation.ClearParent()
	return cuo
}

// ClearChoiceanswers clears all "choiceanswers" edges to the ChoiceAnswer entity.
func (cuo *ChoiceUpdateOne) ClearChoiceanswers() *ChoiceUpdateOne {
	cuo.mutation.ClearChoiceanswers()
	return cuo
}

// RemoveChoiceanswerIDs removes the "choiceanswers" edge to ChoiceAnswer entities by IDs.
func (cuo *ChoiceUpdateOne) RemoveChoiceanswerIDs(ids ...int) *ChoiceUpdateOne {
	cuo.mutation.RemoveChoiceanswerIDs(ids...)
	return cuo
}

// RemoveChoiceanswers removes "choiceanswers" edges to ChoiceAnswer entities.
func (cuo *ChoiceUpdateOne) RemoveChoiceanswers(c ...*ChoiceAnswer) *ChoiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChoiceanswerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChoiceUpdateOne) Select(field string, fields ...string) *ChoiceUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Choice entity.
func (cuo *ChoiceUpdateOne) Save(ctx context.Context) (*Choice, error) {
	var (
		err  error
		node *Choice
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) SaveX(ctx context.Context) *Choice {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChoiceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChoiceUpdateOne) check() error {
	if v, ok := cuo.mutation.Content(); ok {
		if err := choice.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (cuo *ChoiceUpdateOne) sqlSave(ctx context.Context) (_node *Choice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   choice.Table,
			Columns: choice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: choice.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Choice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, choice.FieldID)
		for _, f := range fields {
			if !choice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != choice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: choice.FieldContent,
		})
	}
	if cuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentTable,
			Columns: []string{choice.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.ParentTable,
			Columns: []string{choice.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChoiceanswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChoiceanswersIDs(); len(nodes) > 0 && !cuo.mutation.ChoiceanswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChoiceanswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   choice.ChoiceanswersTable,
			Columns: []string{choice.ChoiceanswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: choiceanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Choice{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{choice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
