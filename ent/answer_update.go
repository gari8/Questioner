// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"faves4/ent/answer"
	"faves4/ent/predicate"
	"faves4/ent/question"
	"faves4/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerUpdate is the builder for updating Answer entities.
type AnswerUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerMutation
}

// Where adds a new predicate for the AnswerUpdate builder.
func (au *AnswerUpdate) Where(ps ...predicate.Answer) *AnswerUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetAnswerType sets the "answer_type" field.
func (au *AnswerUpdate) SetAnswerType(s string) *AnswerUpdate {
	au.mutation.SetAnswerType(s)
	return au
}

// SetNillableAnswerType sets the "answer_type" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableAnswerType(s *string) *AnswerUpdate {
	if s != nil {
		au.SetAnswerType(*s)
	}
	return au
}

// ClearAnswerType clears the value of the "answer_type" field.
func (au *AnswerUpdate) ClearAnswerType() *AnswerUpdate {
	au.mutation.ClearAnswerType()
	return au
}

// SetContent sets the "content" field.
func (au *AnswerUpdate) SetContent(s string) *AnswerUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AnswerUpdate) SetUpdatedAt(t time.Time) *AnswerUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableUpdatedAt(t *time.Time) *AnswerUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AnswerUpdate) ClearUpdatedAt() *AnswerUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (au *AnswerUpdate) SetOwnerID(id string) *AnswerUpdate {
	au.mutation.SetOwnerID(id)
	return au
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (au *AnswerUpdate) SetNillableOwnerID(id *string) *AnswerUpdate {
	if id != nil {
		au = au.SetOwnerID(*id)
	}
	return au
}

// SetOwner sets the "owner" edge to the User entity.
func (au *AnswerUpdate) SetOwner(u *User) *AnswerUpdate {
	return au.SetOwnerID(u.ID)
}

// SetParentID sets the "parent" edge to the Question entity by ID.
func (au *AnswerUpdate) SetParentID(id string) *AnswerUpdate {
	au.mutation.SetParentID(id)
	return au
}

// SetNillableParentID sets the "parent" edge to the Question entity by ID if the given value is not nil.
func (au *AnswerUpdate) SetNillableParentID(id *string) *AnswerUpdate {
	if id != nil {
		au = au.SetParentID(*id)
	}
	return au
}

// SetParent sets the "parent" edge to the Question entity.
func (au *AnswerUpdate) SetParent(q *Question) *AnswerUpdate {
	return au.SetParentID(q.ID)
}

// Mutation returns the AnswerMutation object of the builder.
func (au *AnswerUpdate) Mutation() *AnswerMutation {
	return au.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (au *AnswerUpdate) ClearOwner() *AnswerUpdate {
	au.mutation.ClearOwner()
	return au
}

// ClearParent clears the "parent" edge to the Question entity.
func (au *AnswerUpdate) ClearParent() *AnswerUpdate {
	au.mutation.ClearParent()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnswerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnswerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnswerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnswerUpdate) check() error {
	if v, ok := au.mutation.Content(); ok {
		if err := answer.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (au *AnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answer.Table,
			Columns: answer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answer.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AnswerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answer.FieldAnswerType,
		})
	}
	if au.mutation.AnswerTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: answer.FieldAnswerType,
		})
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answer.FieldContent,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: answer.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: answer.FieldUpdatedAt,
		})
	}
	if au.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.OwnerTable,
			Columns: []string{answer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.OwnerTable,
			Columns: []string{answer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.ParentTable,
			Columns: []string{answer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.ParentTable,
			Columns: []string{answer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AnswerUpdateOne is the builder for updating a single Answer entity.
type AnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerMutation
}

// SetAnswerType sets the "answer_type" field.
func (auo *AnswerUpdateOne) SetAnswerType(s string) *AnswerUpdateOne {
	auo.mutation.SetAnswerType(s)
	return auo
}

// SetNillableAnswerType sets the "answer_type" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableAnswerType(s *string) *AnswerUpdateOne {
	if s != nil {
		auo.SetAnswerType(*s)
	}
	return auo
}

// ClearAnswerType clears the value of the "answer_type" field.
func (auo *AnswerUpdateOne) ClearAnswerType() *AnswerUpdateOne {
	auo.mutation.ClearAnswerType()
	return auo
}

// SetContent sets the "content" field.
func (auo *AnswerUpdateOne) SetContent(s string) *AnswerUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AnswerUpdateOne) SetUpdatedAt(t time.Time) *AnswerUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableUpdatedAt(t *time.Time) *AnswerUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AnswerUpdateOne) ClearUpdatedAt() *AnswerUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (auo *AnswerUpdateOne) SetOwnerID(id string) *AnswerUpdateOne {
	auo.mutation.SetOwnerID(id)
	return auo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableOwnerID(id *string) *AnswerUpdateOne {
	if id != nil {
		auo = auo.SetOwnerID(*id)
	}
	return auo
}

// SetOwner sets the "owner" edge to the User entity.
func (auo *AnswerUpdateOne) SetOwner(u *User) *AnswerUpdateOne {
	return auo.SetOwnerID(u.ID)
}

// SetParentID sets the "parent" edge to the Question entity by ID.
func (auo *AnswerUpdateOne) SetParentID(id string) *AnswerUpdateOne {
	auo.mutation.SetParentID(id)
	return auo
}

// SetNillableParentID sets the "parent" edge to the Question entity by ID if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableParentID(id *string) *AnswerUpdateOne {
	if id != nil {
		auo = auo.SetParentID(*id)
	}
	return auo
}

// SetParent sets the "parent" edge to the Question entity.
func (auo *AnswerUpdateOne) SetParent(q *Question) *AnswerUpdateOne {
	return auo.SetParentID(q.ID)
}

// Mutation returns the AnswerMutation object of the builder.
func (auo *AnswerUpdateOne) Mutation() *AnswerMutation {
	return auo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (auo *AnswerUpdateOne) ClearOwner() *AnswerUpdateOne {
	auo.mutation.ClearOwner()
	return auo
}

// ClearParent clears the "parent" edge to the Question entity.
func (auo *AnswerUpdateOne) ClearParent() *AnswerUpdateOne {
	auo.mutation.ClearParent()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnswerUpdateOne) Select(field string, fields ...string) *AnswerUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Answer entity.
func (auo *AnswerUpdateOne) Save(ctx context.Context) (*Answer, error) {
	var (
		err  error
		node *Answer
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnswerUpdateOne) SaveX(ctx context.Context) *Answer {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnswerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnswerUpdateOne) check() error {
	if v, ok := auo.mutation.Content(); ok {
		if err := answer.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (auo *AnswerUpdateOne) sqlSave(ctx context.Context) (_node *Answer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answer.Table,
			Columns: answer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answer.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Answer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answer.FieldID)
		for _, f := range fields {
			if !answer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AnswerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answer.FieldAnswerType,
		})
	}
	if auo.mutation.AnswerTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: answer.FieldAnswerType,
		})
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answer.FieldContent,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: answer.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: answer.FieldUpdatedAt,
		})
	}
	if auo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.OwnerTable,
			Columns: []string{answer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.OwnerTable,
			Columns: []string{answer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.ParentTable,
			Columns: []string{answer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.ParentTable,
			Columns: []string{answer.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Answer{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
